Queries on a database called Parent, initially containing two tables: Parents and Person.

-- 1. List each pair of parent and child living at the same address.
SELECT Parents.parent, Parents.child
FROM Parents
JOIN Person pe1 ON pe1.name=Parents.parent
JOIN Person pe2 on pe2.name=Parents.child
WHERE pe1.addr=pe2.addr
;

-- 2. List each pair of grandparent and child.
SELECT pa1.parent grandparent, pa2.child child
FROM Parents pa1
JOIN Parents pa2 ON pa1.child=pa2.parent
;

-- 3. List each pair of grandparent and child living at the same address.
SELECT pa1.parent grandparent , pa2.child child
FROM Parents pa1
JOIN Parents pa2 ON pa1.child=pa2.parent
JOIN Person pe1 ON pe1.name=pa1.parent
JOIN Person pe2 ON pe2.name=pa2.child
WHERE pe1.addr=pe2.addr
;

/* 4. Create the table Ancestors(predecessor, successor). Optionally, make predecessor and
successor foreign keys referencing Person(name).*/
CREATE TABLE Ancestors (
predecessor TEXT,
successor TEXT,
FOREIGN KEY (predecessor) REFERENCES Person(name),
FOREIGN KEY (successor) REFERENCES Person(name)
)
;

-- 5. For each pair (p, s) such that p is an ancestor of s, insert the pair (p, s) in Ancestors.
INSERT INTO Ancestors (predecessor, successor)
WITH RECURSIVE temp_ancestors AS (
SELECT parent as p, child as s
FROM Parents
UNION ALL
SELECT pa.parent, anc.s
FROM temp_ancestors anc
JOIN Parents pa ON anc.p=pa.child)
SELECT * 
FROM temp_ancestors
;





Queries on a database called Drinkers, initially containing five tables: Bars, Beers, Drinkers, Likes, Sells.

-- 1. List all pairs of drinkers who live at the same address.
SELECT d1.name, d2.name
FROM Drinkers d1
JOIN Drinkers d2 ON d1.addr=d2.addr
WHERE d1.name<>d2.name
;

-- 2. List all bars that sell Corona AND Bud
SELECT s2.bar
FROM Sells s1, Sells s2
WHERE s1.bar=s2.bar AND s1.beer='Bud' AND s2.beer='Corona'
;

-- 3. Create the table DrinkersBackup(name, addr) and fill it with the same data from Drinkers
CREATE TABLE DrinkersBackup (
  name VARCHAR(20), 
  addr VARCHAR(50),
  PRIMARY KEY (name)
  );
  
INSERT INTO DrinkersBackup (name, addr)
SELECT name, addr
FROM Drinkers
;

-- 4. Create the table Frequents(drinker, bar).
CREATE TABLE Frequents (
  drinker VARCHAR(20),
  bar VARCHAR(20)
  );
  
-- 5. List all drinkers and bars with the same address
SELECT d.name, b.name
FROM Drinkers d 
JOIN Bars b
ON d.addr = b.addr
;

/* 6. List all pairs (drinker, bar) such that
• the drinker and the bar have the same address and
• the bar sells beers that the drinker likes.*/
SELECT DISTINCT d.name drinker, b.name bar
FROM Drinkers d 
JOIN Bars b ON d.addr = b.addr
JOIN Likes l ON d.name=l.drinker
JOIN Sells s ON s.bar=b.name
WHERE s.beer=l.beer
;

-- 7. Insert the results of the previous query in the Frequents table.
INSERT INTO Frequents (
  drinker,
  bar)
SELECT DISTINCT d.name drinker, b.name bar
FROM Drinkers d 
JOIN Bars b ON d.addr = b.addr
JOIN Likes l ON d.name=l.drinker
JOIN Sells s ON s.bar=b.name
WHERE s.beer=l.beer
;
